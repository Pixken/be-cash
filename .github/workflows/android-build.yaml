name: Android APK构建

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的提交历史，方便版本号处理
    
    - name: 设置JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'  # 启用Gradle缓存
    
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'  # 启用pnpm缓存
    
    - name: 安装pnpm
      run: npm install -g pnpm

    - name: 安装依赖
      run: pnpm install

    - name: 构建Web资源
      run: pnpm build
      
    - name: 安装Ionic CLI和Capacitor
      run: npm install -g @ionic/cli @capacitor/cli

    - name: 更新版本号
      id: version-update
      run: |
        # 获取当前版本号
        CURRENT_VERSION=$(grep '"version":' package.json | cut -d'"' -f4)
        echo "当前版本: $CURRENT_VERSION"

        # 解析版本号为 major.minor.patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # 根据提交信息决定更新哪部分版本号
        COMMIT_MSG=$(git log -1 --pretty=%B)
        
        if [[ "$COMMIT_MSG" == *"[major]"* ]]; then
          # 主版本更新
          NEW_MAJOR=$((MAJOR + 1))
          NEW_MINOR=0
          NEW_PATCH=0
          echo "主版本更新"
        elif [[ "$COMMIT_MSG" == *"[minor]"* ]]; then
          # 次版本更新
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$((MINOR + 1))
          NEW_PATCH=0
          echo "次版本更新"
        else
          # 默认补丁版本更新
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$((PATCH + 1))
          echo "补丁版本更新"
        fi
        
        NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
        echo "新版本: $NEW_VERSION"
        
        # 更新 package.json 中的版本号
        sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
        
        # 计算 Android versionCode (major*10000 + minor*100 + patch)
        VERSION_CODE=$((NEW_MAJOR * 10000 + NEW_MINOR * 100 + NEW_PATCH))
        echo "Android versionCode: $VERSION_CODE"
        
        # 更新 Android 项目中的版本号 - 使用更可靠的替换模式
        if [ -f "android/app/build.gradle" ]; then
          # 更新 versionCode - 使用正则表达式确保只匹配整个值
          sed -i "/versionCode/s/\(versionCode\s*\)[0-9]*/\1$VERSION_CODE/" android/app/build.gradle
          # 更新 versionName - 更可靠的替换
          sed -i "/versionName/s/\(versionName\s*\)\"[^\"]*\"/\1\"$NEW_VERSION\"/" android/app/build.gradle
          echo "已更新 Android 版本配置"
        else
          echo "警告: android/app/build.gradle 文件不存在，无法更新Android版本号"
          exit 1
        fi
        
        # 设置环境变量供后续步骤使用
        echo "APP_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

    - name: 复制Web资源到Android平台
      run: |
        npx cap copy android
        npx cap sync android
      
    - name: 设置Gradle权限
      run: chmod +x ./android/gradlew
        
    # 如果需要构建Release版本，还需要配置签名密钥
    - name: 设置签名密钥
      if: github.ref == 'refs/heads/main'
      run: |
        # 检查secrets是否已设置
        if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "错误: KEYSTORE_BASE64 未设置"
          exit 1
        fi
        
        # 将base64编码的密钥库解码到文件中
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/my-release-key.keystore
        
        # 验证密钥库文件已正确创建
        if [ ! -f "android/app/my-release-key.keystore" ]; then
          echo "错误: 密钥库文件创建失败"
          exit 1
        fi
        
        # 创建key.properties文件
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=my-release-key.keystore" >> android/key.properties
        
        # 检查key.properties文件是否已正确创建
        if [ ! -f "android/key.properties" ]; then
          echo "错误: key.properties 文件创建失败"
          exit 1
        fi
      
    - name: 构建Release APK
      id: build-release
      if: github.ref == 'refs/heads/main'
      run: |
        cd android
        # 首先清理构建，避免缓存问题
        ./gradlew clean
        # 构建发布版APK
        ./gradlew assembleRelease
        
        # 检查APK是否已生成
        if [ ! -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo "错误: APK构建失败，找不到app-release.apk"
          exit 1
        fi
        
        echo "APK构建成功!"
        
    # 可选：自动更新apk-update.json文件
    - name: 更新APK信息
      id: update-apk-info
      if: github.ref == 'refs/heads/main'
      run: |
        # 确保APK存在
        if [ ! -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
          echo "错误: 找不到APK文件"
          exit 1
        fi
        
        APK_SIZE=$(stat -c%s "android/app/build/outputs/apk/release/app-release.apk")
        APK_SHA256=$(sha256sum "android/app/build/outputs/apk/release/app-release.apk" | cut -d' ' -f1)
        VERSION=${{ env.APP_VERSION }}
        
        # 再次确认环境变量存在
        if [ -z "$VERSION" ]; then
          echo "错误: 版本环境变量未设置"
          VERSION=$(grep '"version":' package.json | cut -d'"' -f4)
          echo "使用package.json中的版本: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        fi
        
        echo "APK信息: 大小=$APK_SIZE 字节, SHA256=$APK_SHA256, 版本=$VERSION"
        
        # 更新apk-update.json文件
        cat > public/apk-update.json << EOL
        {
          "android": {
            "version": "$VERSION",
            "minVersion": "0.0.1",
            "url": "http://117.72.49.27/downloads/be-cash-$VERSION.apk",
            "size": $APK_SIZE,
            "sha256": "$APK_SHA256",
            "isCritical": false,
            "releaseDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
        }
        EOL
        
        # 重命名APK文件
        mv android/app/build/outputs/apk/release/app-release.apk android/app/build/outputs/apk/release/be-cash-$VERSION.apk
        
        # 添加调试信息
        echo "APK 文件已移动到:"
        ls -la android/app/build/outputs/apk/release/
        
    # 新增一个步骤：将文件移动到临时目录以便上传
    - name: 准备上传文件
      if: github.ref == 'refs/heads/main'
      run: |
        # 创建临时目录
        mkdir -p ./upload_temp
        
        # 确保文件存在
        if [ ! -f "android/app/build/outputs/apk/release/be-cash-${{ env.VERSION }}.apk" ]; then
          echo "错误: 找不到APK文件 be-cash-${{ env.VERSION }}.apk"
          ls -la android/app/build/outputs/apk/release/
          exit 1
        fi
        
        if [ ! -f "public/apk-update.json" ]; then
          echo "错误: 找不到apk-update.json文件"
          exit 1
        fi
        
        # 复制文件到临时目录
        cp android/app/build/outputs/apk/release/be-cash-${{ env.VERSION }}.apk ./upload_temp/
        cp public/apk-update.json ./upload_temp/
        
        # 显示临时目录内容
        echo "准备上传的文件:"
        ls -la ./upload_temp/

    # 修改上传步骤
    - name: 上传APK到服务器
      if: github.ref == 'refs/heads/main'
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        source: "./upload_temp/*"  # 从临时目录上传所有文件
        target: "/home/be-cash/downloads/"
        strip_components: 1  # 只去掉 upload_temp 这一级目录
        timeout: 120s  # 增加超时时间，避免大文件上传中断
        overwrite: true  # 允许覆盖目标文件

    - name: 验证APK签名
      if: github.ref == 'refs/heads/main'
      run: |
        ls -la android/app/build/outputs/apk/release/
        echo "验证APK签名..."
        
        # 检查是否有APK文件
        if ls android/app/build/outputs/apk/release/*.apk 1> /dev/null 2>&1; then
          # 验证APK是否已签名
          jarsigner -verify -verbose android/app/build/outputs/apk/release/*.apk
          EXIT_CODE=$?
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ APK签名验证成功"
          else
            echo "❌ APK签名验证失败"
            exit 1
          fi
        else
          echo "错误: 找不到APK文件"
          exit 1
        fi
        
    # 新增: 创建一个包含构建信息的工件
    - name: 生成构建信息
      if: github.ref == 'refs/heads/main'
      run: |
        cat > build-info.json << EOL
        {
          "version": "${{ env.APP_VERSION }}",
          "versionCode": ${{ env.VERSION_CODE }},
          "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "commit": "${{ github.sha }}",
          "branch": "${GITHUB_REF#refs/heads/}",
          "workflow": "${{ github.workflow }}",
          "runId": ${{ github.run_id }}
        }
        EOL
        
    # 上传构建信息作为工件
    - name: 上传构建信息
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: build-info.json
        retention-days: 30