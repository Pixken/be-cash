name: Android APK构建

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 设置JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: 安装pnpm
      run: npm install -g pnpm

    - name: 安装依赖
      run: pnpm install

    - name: 构建Web资源
      run: pnpm build
      
    - name: 安装Ionic CLI和Capacitor
      run: npm install -g @ionic/cli @capacitor/cli
      
    - name: 复制Web资源到Android平台
      run: npx cap copy android
      
    - name: 设置Gradle权限
      run: chmod +x ./android/gradlew
      
    - name: 构建Debug APK
      run: |
        cd android
        ./gradlew assembleDebug
        
    - name: 上传Debug APK
      uses: actions/upload-artifact@v3
      with:
        name: app-debug
        path: android/app/build/outputs/apk/debug/app-debug.apk
        
    # 如果需要构建Release版本，还需要配置签名密钥
    - name: 设置签名密钥
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/my-release-key.keystore
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=my-release-key.keystore" >> android/key.properties
      
    - name: 构建Release APK
      if: github.ref == 'refs/heads/main'
      run: |
        cd android
        ./gradlew assembleRelease
        
    - name: 上传Release APK
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: app-release
        path: android/app/build/outputs/apk/release/app-release.apk
        
    # 可选：自动更新apk-update.json文件
    - name: 更新APK信息
      if: github.ref == 'refs/heads/main'
      run: |
        APK_SIZE=$(stat -c%s "android/app/build/outputs/apk/release/app-release.apk")
        APK_SHA256=$(sha256sum "android/app/build/outputs/apk/release/app-release.apk" | cut -d' ' -f1)
        VERSION=$(grep '"version":' package.json | cut -d'"' -f4)
        
        # 更新apk-update.json文件
        cat > public/apk-update.json << EOL
        {
          "android": {
            "version": "$VERSION",
            "minVersion": "1.0.0",
            "url": "https://your-server.com/downloads/your-app-$VERSION.apk",
            "size": $APK_SIZE,
            "sha256": "$APK_SHA256",
            "isCritical": false
          }
        }
        EOL
        
    # 可选：将APK上传到服务器
    - name: 上传APK到服务器
      if: github.ref == 'refs/heads/main'
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        source: "android/app/build/outputs/apk/release/app-release.apk,public/apk-update.json"
        target: "/home/be-cash/downloads/"
        strip_components: 3