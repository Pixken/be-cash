name: Android APK构建

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 添加权限配置
permissions:
  contents: write

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整的提交历史，便于版本更新
    
    - name: 设置JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: 安装pnpm
      run: npm install -g pnpm

    - name: 安装依赖
      run: pnpm install

    - name: 构建Web资源
      run: pnpm build
      
    - name: 安装Ionic CLI和Capacitor
      run: npm install -g @ionic/cli @capacitor/cli

    - name: 更新版本号
      run: |
        # 获取当前版本号
        CURRENT_VERSION=$(grep '"version":' package.json | cut -d'"' -f4)
        echo "当前版本: $CURRENT_VERSION"

        # 解析版本号为 major.minor.patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # 根据提交信息决定更新哪部分版本号
        COMMIT_MSG=$(git log -1 --pretty=%B)
        
        if [[ "$COMMIT_MSG" == *"[major]"* ]]; then
          # 主版本更新
          NEW_MAJOR=$((MAJOR + 1))
          NEW_MINOR=0
          NEW_PATCH=0
          echo "主版本更新"
        elif [[ "$COMMIT_MSG" == *"[minor]"* ]]; then
          # 次版本更新
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$((MINOR + 1))
          NEW_PATCH=0
          echo "次版本更新"
        else
          # 默认补丁版本更新
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$((PATCH + 1))
          echo "补丁版本更新"
        fi
        
        NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
        echo "新版本: $NEW_VERSION"
        
        # 更新 package.json 中的版本号
        sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
        
        # 计算 Android versionCode (major*10000 + minor*100 + patch)
        VERSION_CODE=$((NEW_MAJOR * 10000 + NEW_MINOR * 100 + NEW_PATCH))
        echo "Android versionCode: $VERSION_CODE"
        
        # 更新 Android 项目中的版本号
        if [ -f "android/app/build.gradle" ]; then
          # 更新 versionCode
          sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" android/app/build.gradle
          # 更新 versionName
          sed -i "s/versionName \"[^\"]*\"/versionName \"$NEW_VERSION\"/" android/app/build.gradle
          echo "已更新 Android 版本配置"
        fi
        
        # 设置环境变量供后续步骤使用
        echo "APP_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
        
    # 新增步骤：将版本更新提交回仓库
    - name: 提交版本更新
      if: github.ref == 'refs/heads/main'
      run: |
        # 配置Git用户
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 检查是否有变更
        if git diff --quiet package.json android/app/build.gradle; then
          echo "没有版本号变更，跳过提交"
        else
          # 添加并提交变更
          git add package.json android/app/build.gradle
          git commit -m "chore: 更新版本号到 ${{ env.APP_VERSION }} [skip ci]"
          
          # 推送变更回仓库 (使用GitHub_TOKEN进行身份验证)
          git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
          
          echo "✅ 已将版本更新提交回仓库"
        fi

    - name: 复制Web资源到Android平台
      run: |
        npx cap copy android
        npx cap sync android
      
    - name: 设置Gradle权限
      run: chmod +x ./android/gradlew
        
    # 如果需要构建Release版本，还需要配置签名密钥
    - name: 设置签名密钥
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/my-release-key.keystore
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=my-release-key.keystore" >> android/key.properties
      
    - name: 构建Release APK
      if: github.ref == 'refs/heads/main'
      run: |
        cd android
        ./gradlew assembleRelease
        
    # - name: 上传Release APK
    #   if: github.ref == 'refs/heads/main'
    #   uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
    #   with:
    #     name: app-release
    #     path: android/app/build/outputs/apk/release/app-release.apk
        
    # 可选：自动更新apk-update.json文件
    - name: 更新APK信息
      if: github.ref == 'refs/heads/main'
      run: |
        APK_SIZE=$(stat -c%s "android/app/build/outputs/apk/release/app-release.apk")
        APK_SHA256=$(sha256sum "android/app/build/outputs/apk/release/app-release.apk" | cut -d' ' -f1)
        VERSION=$(grep '"version":' package.json | cut -d'"' -f4)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # 更新apk-update.json文件
        cat > public/apk-update.json << EOL
        {
          "android": {
            "version": "$VERSION",
            "minVersion": "0.0.1",
            "url": "http://117.72.49.27:9522/downloads/be-cash-$VERSION.apk",
            "size": $APK_SIZE,
            "sha256": "$APK_SHA256",
            "isCritical": false,
            "releaseDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
        }
        EOL
        
        # 重命名APK文件
        mv android/app/build/outputs/apk/release/app-release.apk android/app/build/outputs/apk/release/be-cash-$VERSION.apk
        
        # 添加调试信息
        echo "APK 文件已移动到:"
        ls -la android/app/build/outputs/apk/release/
        
    # 新增一个步骤：将文件移动到临时目录以便上传
    - name: 准备上传文件
      if: github.ref == 'refs/heads/main'
      run: |
        # 创建临时目录
        mkdir -p ./upload_temp
        # 复制文件到临时目录
        cp android/app/build/outputs/apk/release/be-cash-${{ env.VERSION }}.apk ./upload_temp/
        cp public/apk-update.json ./upload_temp/
        # 显示临时目录内容
        echo "准备上传的文件:"
        ls -la ./upload_temp/

    # 修改上传步骤
    - name: 上传APK到服务器
      if: github.ref == 'refs/heads/main'
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        source: "./upload_temp/*"  # 从临时目录上传所有文件
        target: "/home/be-cash/downloads/"
        strip_components: 1  # 只去掉 upload_temp 这一级目录

    - name: 查看生成的文件
      if: github.ref == 'refs/heads/main'
      run: |
        ls -la android/app/build/outputs/apk/release/
        # 验证APK是否已签名
        jarsigner -verify -verbose android/app/build/outputs/apk/release/*.apk